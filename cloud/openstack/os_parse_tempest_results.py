#!/usr/bin/python

from ansible.module_utils.basic import *
import os

DOCUMENTATION = '''
---
module: os_parse_tempest_results
short_description: this module parse the result file generated by Tempest (OpenStack)
description:
    - Parse Tempest's results to the format the user chose using subunit

author: "Tal Shafir , @TalShafir"
requirements:
    - testr or os-testr installed
options:
    results_path:
        description:
            -path to the results file Tempest generated
        required: True
    output_path:
        description:
            -path to the parsed results file this module will generated
        required: False
        default: I(results_path)
    output_format:
        description:
            -format of the parsed results file this module will generated
        required: False
        default: xml
        choices: [xml, html]
    virtualenv:
        description:
            -path to the virtual environment ostestr is installed at
        required: False
        default: '/usr'

'''
EXAMPLES = ''' # TODO
'''


def main():
    module = AnsibleModule(argument_spec={
        "results_path": {"type": "path", "required": True},
        "output_path": {"type": "path", "required": False},
        "output_format": {"type": "string", "required": False, "default": "html", "choices": ["xml", "html"]},
        "virtualenv": {"type": "path", "required": False, "default": ""}
    })

    if module.params['virtualenv']:
        activate_virtual_environment(os.path.abspath(os.path.expanduser(module.params['virtualenv'])))

    if module.params['output_format'] == 'html':  # TODO handle directory instead of file as the output_path
        try:
            import os_testr.subunit2html
        except ImportError as e:
            module.fail_json(msg="failed to import os_testr.subunit2html", error=str(e))

        # save original argv
        _argv = sys.argv

        # change argv to work with subunit2html
        sys.argv = [sys.argv[0], module.params['results_path'], module.params['output_path']]
        os_testr.subunit2html.main()

        # restore the argv to the original
        sys.argv = _argv

        module.exit_json(msg="html file was successfully created", output_path=module.params['output_path'])

    elif module.params['output_format'] == 'xml':
        module.fail_json(msg="XML IS NOT SUPPORTED YET")


def activate_virtual_environment(environment_path):
    """
        Activate the python virtual environment in the given path
        :param environment_path: A path to the python virtual environment
        :type environment_path: str
        """
    activation_script_suffix = '/bin/activate_this.py'
    activate_venv = environment_path + activation_script_suffix
    execfile(activate_venv, dict(__file__=activate_venv))


if __name__ == '__main__':
    main()
